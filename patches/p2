--- netif/xemacliteif.c	2012-10-09 23:24:21.595476546 +0300
+++ netif/xemacliteif.c	2011-10-04 12:33:30.000000000 +0300
@@ -130,9 +177,14 @@
 #if LINK_STATS
 		lwip_stats.link.memerr++;
 		lwip_stats.link.drop++;
-#endif       
+#endif
 		return;
 	}
+
+#if !NO_SYS
+	sys_sem_signal(xemac->sem_rx_data_available);
+#endif
+
 }
 
 int transmit_packet(XEmacLite *instancep, void *packet, unsigned len)
@@ -310,8 +362,11 @@
  * should handle the actual reception of bytes from the network
  * interface.
  *
+ * Returns the number of packets read (max 1 packet on success,
+ * 0 if there are no packets)
+ *
  */
-void
+int
 xemacliteif_input(struct netif *netif)
 {
 	struct eth_hdr *ethhdr;
@@ -324,8 +379,8 @@
 	SYS_ARCH_UNPROTECT(lev);
 
 	/* no packet could be read, silently ignore this */
-	if (p == NULL) 
-		return;
+	if (p == NULL)
+		return 0;
 
 	/* points to packet payload, which starts with an Ethernet header */
 	ethhdr = p->payload;
@@ -344,8 +399,8 @@
 		case ETHTYPE_PPPOE:
 #endif /* PPPOE_SUPPORT */
 			/* full packet send to tcpip_thread to process */
-			if (netif->input(p, netif) != ERR_OK) { 
-				LWIP_DEBUGF(NETIF_DEBUG, ("xlltemacif_input: IP input error\n"));
+			if (netif->input(p, netif) != ERR_OK) {
+				LWIP_DEBUGF(NETIF_DEBUG, ("xlltemacif_input: IP input error\r\n"));
 				pbuf_free(p);
 				p = NULL;
 			}
@@ -357,6 +412,7 @@
 			break;
 	}
 
+	return 1;
 }
 
 #if !NO_SYS
@@ -453,9 +510,13 @@
 	/* enable Rx, Tx interrupts */
     	XEmacLite_EnableInterrupts(xemaclitep);
 
-	/* replace the state in netif (currently the base address of emaclite) 
+#if !NO_SYS
+	xemac->sem_rx_data_available = sys_sem_new(0);
+#endif
+
+	/* replace the state in netif (currently the base address of emaclite)
 	 * with the xemacliteif instance pointer.
-	 * this contains a pointer to the config table entry 
+	 * this contains a pointer to the config table entry
 	 */
 	xemac->type = xemac_type_xps_emaclite;
 	xemac->state = (void *)xemacliteif;
